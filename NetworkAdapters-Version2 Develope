# Get all network adapters on the system
$adapters = Get-NetAdapter
# Find the adapters with InterfaceDescription set to "LAN7800"
$targetAdapters = $adapters | Where-Object {$_.InterfaceDescription -like "*LAN7800*"}
#if teaming already exist not called team_nic remove it
$teaming_name = "team_nic"
$teaming_driver = "Microsoft Network Adapter Multiplexor Driver"
$vmswitch_name = "ext-vSW"


# Save the adapter names to variables
$nic1 = $targetAdapters[0].Name
$nic2 = $targetAdapters[1].Name

#check if the team nic is exist in the network adapters
[bool] $flag1 = $false
foreach ($i in $adapters){
    if ($i.name -eq $teaming_name){
        [bool] $flag1 = $true

        continue
    }
}

# Run the Get-NetSwitchTeam command and save the output as a string
$output = Get-NetSwitchTeam | Out-String

# Remove newline characters from the output string
$output = $output -replace "[\r\n]+", ""

# Extract member names
$memberNames = $output -split 'Members : {', 2 | Select-Object -Last 1
$memberNames = $memberNames.TrimEnd('}')

# Display member names
$member1, $member2 = $memberNames -split ', '
Write-Host $member1
Write-Host $member2


# Check if we found exactly two adapters with the target description
if ($targetAdapters.Count -ne 2) {
    Write-Error "Expected to find 2 network adapters, but found $($targetAdapters.Count)"
    return
}


#check if there is a virtual switch called ext
$ext_vm_sw = Get-VMSwitch
$filtered_nic = $ext_vm_sw.name | Select-String -Pattern "ext-vSW" -CaseSensitive -SimpleMatch
$filtered_nic = $filtered_nic -replace " ", ""
[bool] $flag2 = $false
[bool] $flag3 = $false

foreach ($j in $ext_vm_sw){
    if ($j.name -eq $filtered_nic){
        [bool] $flag2 = $true
        if($j.NetAdapterInterfaceDescription -eq $teaming_driver){
            [bool] $flag3 = $true
            continue
        }
        continue
    }
}
#case: have to create teaming nic, create vmswitch, associate the teaming to virtual switch
if (([bool] $flag1 -eq $false) -and ([bool] $flag2 -eq $false) -and ([bool] $flag3 -eq $false)){
    New-NetSwitchTeam -Name $teaming_name -TeamMembers "$nic1", "$nic2"
    Start-Sleep 10
    New-VMSwitch -Name ext-vSW -NetAdapterName $teaming_name -AllowManagementOS $true
    exit
}
#case: have to create teaming nic, associate the teaming to virtual switch that already exist
if (([bool] $flag1 -eq $false) -and ([bool] $flag2 -eq $true)){
    New-NetSwitchTeam -Name $teaming_name -TeamMembers "$nic1", "$nic2"
    Set-VMSwitch -Name $vmswitch_name -SwitchType External -NetAdapterName $teaming_name 
    exit
}
#case: there is teaming nic and virutal switch exist but the teaming nic is not associate to virtual switch
if (([bool] $flag1 -eq $true) -and ([bool] $flag2 -eq $true) -and ([bool] $flag3 -eq $false)){
    if (($nic1 -eq $member1 -or $nic1 -eq $member2) -and($nic2 -eq $member1 -or $nic2 -eq $member2)){
        Remove-NetSwitchTeam "*"
        Start-Sleep 10
        New-NetSwitchTeam -Name $teaming_name -TeamMembers "$member1", "$member2"
    }
    Set-VMSwitch -Name $ext_vm_sw -NetAdapterName $teaming_name 
    exit
}
#case: there is teaming nic but there is not virutal switch
if (([bool] $flag1 -eq $true) -and ([bool] $flag2 -eq $false) -and ([bool] $flag3 -eq $false) ){
    if (($nic1 -eq $member1 -or $nic1 -eq $member2) -and($nic2 -eq $member1 -or $nic2 -eq $member2)){
        Remove-NetSwitchTeam "*"
        Start-Sleep 10
        New-NetSwitchTeam -Name $teaming_name -TeamMembers "$member1", "$member2"
    }
    New-VMSwitch -Name ext-vSW -NetAdapterName $teaming_name -AllowManagementOS $true
    exit
}
#case: there are teaming nic and virutal switch
if (([bool] $flag1 -eq $true) -and ([bool] $flag2 -eq $true) -and ([bool] $flag3 -eq $true)){
    exit
}

#add test to check if the nic is internal
/#
#flag1 = true if there is teaming nic and false if not
#flag2 = true if there is virtual switch called ext-vSW and false if not
#flag3 = true if the teaming nic is associated to virtual switch called ext and false if not
#/
