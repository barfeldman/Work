# Get all network adapters on the system
$adapters = Get-NetAdapter
# Find the adapters with InterfaceDescription set to "some_name"
$targetAdapters = $adapters | Where-Object {$_.InterfaceDescription -like "*LAN7800*"}
#if teaming already exist not called team_nic remove it
$teaming_name = "team_nic"
$teaming_driver = "Microsoft Network Adapter Multiplexor Driver"
$vmswitch_name = "ext-vSW"
$desiredSwitchType = "External"


# Save the adapter names to variables
$nic1 = $targetAdapters[0].Name
$nic2 = $targetAdapters[1].Name

#check if the team nic is exist in the network adapters
[bool] $flag1 = $false
foreach ($i in $adapters){
    if ($i.name -eq $teaming_name){
        [bool] $flag1 = $true
        continue
    }
} 
# Check if we found exactly two adapters with the target description
if ($targetAdapters.Count -ne 2) {
    Write-Error "Expected to find 2 network adapters, but found $($targetAdapters.Count)"
    return
}

#check if there is a virtual switch called ext
$ext_vm_sw = Get-VMSwitch
$filtered_nic = $ext_vm_sw.name | Select-String -Pattern "ext-vSW" -CaseSensitive -SimpleMatch
$filtered_nic = $filtered_nic -replace " ", ""
[bool] $flag2 = $false
[bool] $flag3 = $false

foreach ($j in $ext_vm_sw){
    Write-Host $j #debug
    Read-Host 'brake' #debug
    if ($j.name -eq $filtered_nic){
        [bool] $flag2 = $true
        if($j.NetAdapterInterfaceDescription -eq $teaming_driver){
            [bool] $flag3 = $true
            continue
        }
        continue
    }
}
#debug
Read-Host $flag1 $flag2 $flag3
if (([bool] $flag1 -eq $false) -and ([bool] $flag2 -eq $false) -and ([bool] $flag3 -eq $false)){
    write-host '1'
    Remove-netswitchteam "*"
    New-NetSwitchTeam -Name $teaming_name -TeamMembers $nic1, $nic2
    Write-Host "Teaming nic created"
    Start-Sleep 10
    New-VMSwitch -Name ext-vSW -NetAdapterName 'team_nic' -AllowManagementOS $true
    exit
}
if (([bool] $flag1 -eq $false) -and ([bool] $flag2 -eq $true)){
    write-host '2'
    Remove-netswitchteam "*"
    New-NetSwitchTeam -Name $teaming_name -TeamMembers $nic1, $nic2
        Read-Host "brake"
        # Remove the existing virtual switch
        Remove-VMSwitch -Name $vmswitch_name -Force

        # Create a new virtual switch with the desired switch type
        New-VMSwitch -Name ext-vSW -NetAdapterName 'team_nic' -AllowManagementOS $true 

    exit
    }

if (([bool] $flag1 -eq $true) -and ([bool] $flag2 -eq $true) -and ([bool] $flag3 -eq $false)){
    write-host '3'
    Remove-VMSwitch -Name $vmswitch_name -Force
    Start-Sleep 5
    New-VMSwitch -Name ext-vSW -NetAdapterName 'team_nic' -AllowManagementOS $true
    exit
}
if (([bool] $flag1 -eq $true) -and ([bool] $flag2 -eq $false) -and ([bool] $flag3 -eq $false) ){
    write-host '4'
    Remove-VMSwitch -Name $vmswitch_name -Force
    Start-Sleep 5
    New-VMSwitch -Name ext-vSW -NetAdapterName 'team_nic' -AllowManagementOS $true 
    exit
}

if (([bool] $flag1 -eq $true) -and ([bool] $flag2 -eq $true) -and ([bool] $flag3 -eq $true)){
    write-host '5'
    exit
}

#add test to check if the nic is internal


#flag1 = true if there is teaming nic and false if not
#flag2 = true if there is virtual switch called ext-vSW and false if not
#flag3 = true if the teaming nic is associated to virtual switch called ext and false if not
